{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"api/","text":"API Documentation \u00b6 tm2py.template.TemplateClass \u00b6 The summary line for a class docstring should fit on one line. If the class has public attributes, they may be documented here in an Attributes section and follow the same formatting as a function\u2019s Args section. Alternatively, attributes may be documented inline with the attribute\u2019s declaration (see init method below). Properties created with the @property decorator should be documented in the property\u2019s getter method. Attributes: Name Type Description attr1 str Description of attr1 . attr2 my_readonly_property property readonly \u00b6 __init__ ( self , var1 , var2 = 'default' ) special \u00b6 One-line summary of what method does. Parameters: Name Type Description Default var1 int Description of var1. required var2 str Description of var2. Defaults to \u201cdefault\u201d. 'default'","title":"API Documentation"},{"location":"api/#api-documentation","text":"","title":"API Documentation"},{"location":"api/#tm2py.template.TemplateClass","text":"The summary line for a class docstring should fit on one line. If the class has public attributes, they may be documented here in an Attributes section and follow the same formatting as a function\u2019s Args section. Alternatively, attributes may be documented inline with the attribute\u2019s declaration (see init method below). Properties created with the @property decorator should be documented in the property\u2019s getter method. Attributes: Name Type Description attr1 str Description of attr1 . attr2","title":"TemplateClass"},{"location":"api/#tm2py.template.TemplateClass.my_readonly_property","text":"","title":"my_readonly_property"},{"location":"api/#tm2py.template.TemplateClass.__init__","text":"One-line summary of what method does. Parameters: Name Type Description Default var1 int Description of var1. required var2 str Description of var2. Defaults to \u201cdefault\u201d. 'default'","title":"__init__()"},{"location":"architecture/","text":"","title":"Architecture"},{"location":"starting/","text":"Starting Out \u00b6 Installation \u00b6 If you are managing multiple python versions, we suggest using virtualenv or conda virtual environments. The following instructions create and activate a conda environment (recommended) in which you can install: conda env create -f environment.yml conda activate tm2py Basic installation instructions are as follows: pip install tm2py Bleeding Edge \u00b6 If you want to install a more up-to-date or development version, you can do so by installing it from the develop branch as follows: conda env create -f environment.yml conda activate tm2py pip install git+https://github.com/bayareametro/tm2py@develop Developers (from clone) \u00b6 If you are going to be working on Lasso locally, you might want to clone it to your local machine and install it from the clone. The -e will install it in editable mode . conda env create -f environment.yml conda activate tm2py git clone https://github.com/bayareametro/tm2py cd tm2py pip install -e . Notes: The -e installs it in editable mode. If you are not part of the project team and want to contribute code bxack to the project, please fork before you clone and then add the original repository to your upstream origin list per these directions on github . if you wanted to install from a specific tag/version number or branch, replace @main with @<branchname> or @tag If you want to make use of frequent developer updates for network wrangler as well, you can also install it from clone by copying the instructions for cloning and installing Lasso for Network Wrangler If you are going to be doing development, we also recommend: - a good IDE such as VS Code , Sublime Text, etc. with Python syntax highlighting turned on. - GitHub Desktop to locally update your clones Brief Intro \u00b6 Typical Workflow \u00b6 Running Quickstart Jupyter Notebooks \u00b6 To learn basic lasso functionality, please refer to the following jupyter notebooks in the /notebooks directory: ADDME Jupyter notebooks can be started by activating the lasso conda environment and typing jupyter notebook : conda activate tm2py jupyter notebook","title":"Starting Out"},{"location":"starting/#starting-out","text":"","title":"Starting Out"},{"location":"starting/#installation","text":"If you are managing multiple python versions, we suggest using virtualenv or conda virtual environments. The following instructions create and activate a conda environment (recommended) in which you can install: conda env create -f environment.yml conda activate tm2py Basic installation instructions are as follows: pip install tm2py","title":"Installation"},{"location":"starting/#bleeding-edge","text":"If you want to install a more up-to-date or development version, you can do so by installing it from the develop branch as follows: conda env create -f environment.yml conda activate tm2py pip install git+https://github.com/bayareametro/tm2py@develop","title":"Bleeding Edge"},{"location":"starting/#developers-from-clone","text":"If you are going to be working on Lasso locally, you might want to clone it to your local machine and install it from the clone. The -e will install it in editable mode . conda env create -f environment.yml conda activate tm2py git clone https://github.com/bayareametro/tm2py cd tm2py pip install -e . Notes: The -e installs it in editable mode. If you are not part of the project team and want to contribute code bxack to the project, please fork before you clone and then add the original repository to your upstream origin list per these directions on github . if you wanted to install from a specific tag/version number or branch, replace @main with @<branchname> or @tag If you want to make use of frequent developer updates for network wrangler as well, you can also install it from clone by copying the instructions for cloning and installing Lasso for Network Wrangler If you are going to be doing development, we also recommend: - a good IDE such as VS Code , Sublime Text, etc. with Python syntax highlighting turned on. - GitHub Desktop to locally update your clones","title":"Developers (from clone)"},{"location":"starting/#brief-intro","text":"","title":"Brief Intro"},{"location":"starting/#typical-workflow","text":"","title":"Typical Workflow"},{"location":"starting/#running-quickstart-jupyter-notebooks","text":"To learn basic lasso functionality, please refer to the following jupyter notebooks in the /notebooks directory: ADDME Jupyter notebooks can be started by activating the lasso conda environment and typing jupyter notebook : conda activate tm2py jupyter notebook","title":"Running Quickstart Jupyter Notebooks"},{"location":"contributing/documentation/","text":"Documentation \u00b6 Documentation is developed using the Python package mkdocs . Installing \u00b6 Using pip: pip install -r docs/requirements.txt Building Locally \u00b6 Mkdocs documentation webpages can be built using the following shell command from the docs folder: mkdocs build mkdocs serve Deploying documentation \u00b6 Documentation is built and deployed to [http://bayareametro.github.io/tm2py] upon the develop branch successfully passing continuous integration tests (to be updated to master when released) as specified in .github/workflows/docs.yml .","title":"Documentation"},{"location":"contributing/documentation/#documentation","text":"Documentation is developed using the Python package mkdocs .","title":"Documentation"},{"location":"contributing/documentation/#installing","text":"Using pip: pip install -r docs/requirements.txt","title":"Installing"},{"location":"contributing/documentation/#building-locally","text":"Mkdocs documentation webpages can be built using the following shell command from the docs folder: mkdocs build mkdocs serve","title":"Building Locally"},{"location":"contributing/documentation/#deploying-documentation","text":"Documentation is built and deployed to [http://bayareametro.github.io/tm2py] upon the develop branch successfully passing continuous integration tests (to be updated to master when released) as specified in .github/workflows/docs.yml .","title":"Deploying documentation"}]}